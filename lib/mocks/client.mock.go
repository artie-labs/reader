// Code generated by counterfeiter. DO NOT EDIT.
package mocks

import (
	"sync"
	"time"

	"github.com/artie-labs/reader/lib/mtr"
)

type FakeClient struct {
	CountStub        func(string, int64, map[string]string)
	countMutex       sync.RWMutex
	countArgsForCall []struct {
		arg1 string
		arg2 int64
		arg3 map[string]string
	}
	GaugeStub        func(string, float64, map[string]string)
	gaugeMutex       sync.RWMutex
	gaugeArgsForCall []struct {
		arg1 string
		arg2 float64
		arg3 map[string]string
	}
	IncrStub        func(string, map[string]string)
	incrMutex       sync.RWMutex
	incrArgsForCall []struct {
		arg1 string
		arg2 map[string]string
	}
	TimingStub        func(string, time.Duration, map[string]string)
	timingMutex       sync.RWMutex
	timingArgsForCall []struct {
		arg1 string
		arg2 time.Duration
		arg3 map[string]string
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeClient) Count(arg1 string, arg2 int64, arg3 map[string]string) {
	fake.countMutex.Lock()
	fake.countArgsForCall = append(fake.countArgsForCall, struct {
		arg1 string
		arg2 int64
		arg3 map[string]string
	}{arg1, arg2, arg3})
	stub := fake.CountStub
	fake.recordInvocation("Count", []interface{}{arg1, arg2, arg3})
	fake.countMutex.Unlock()
	if stub != nil {
		fake.CountStub(arg1, arg2, arg3)
	}
}

func (fake *FakeClient) CountCallCount() int {
	fake.countMutex.RLock()
	defer fake.countMutex.RUnlock()
	return len(fake.countArgsForCall)
}

func (fake *FakeClient) CountCalls(stub func(string, int64, map[string]string)) {
	fake.countMutex.Lock()
	defer fake.countMutex.Unlock()
	fake.CountStub = stub
}

func (fake *FakeClient) CountArgsForCall(i int) (string, int64, map[string]string) {
	fake.countMutex.RLock()
	defer fake.countMutex.RUnlock()
	argsForCall := fake.countArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeClient) Gauge(arg1 string, arg2 float64, arg3 map[string]string) {
	fake.gaugeMutex.Lock()
	fake.gaugeArgsForCall = append(fake.gaugeArgsForCall, struct {
		arg1 string
		arg2 float64
		arg3 map[string]string
	}{arg1, arg2, arg3})
	stub := fake.GaugeStub
	fake.recordInvocation("Gauge", []interface{}{arg1, arg2, arg3})
	fake.gaugeMutex.Unlock()
	if stub != nil {
		fake.GaugeStub(arg1, arg2, arg3)
	}
}

func (fake *FakeClient) GaugeCallCount() int {
	fake.gaugeMutex.RLock()
	defer fake.gaugeMutex.RUnlock()
	return len(fake.gaugeArgsForCall)
}

func (fake *FakeClient) GaugeCalls(stub func(string, float64, map[string]string)) {
	fake.gaugeMutex.Lock()
	defer fake.gaugeMutex.Unlock()
	fake.GaugeStub = stub
}

func (fake *FakeClient) GaugeArgsForCall(i int) (string, float64, map[string]string) {
	fake.gaugeMutex.RLock()
	defer fake.gaugeMutex.RUnlock()
	argsForCall := fake.gaugeArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeClient) Incr(arg1 string, arg2 map[string]string) {
	fake.incrMutex.Lock()
	fake.incrArgsForCall = append(fake.incrArgsForCall, struct {
		arg1 string
		arg2 map[string]string
	}{arg1, arg2})
	stub := fake.IncrStub
	fake.recordInvocation("Incr", []interface{}{arg1, arg2})
	fake.incrMutex.Unlock()
	if stub != nil {
		fake.IncrStub(arg1, arg2)
	}
}

func (fake *FakeClient) IncrCallCount() int {
	fake.incrMutex.RLock()
	defer fake.incrMutex.RUnlock()
	return len(fake.incrArgsForCall)
}

func (fake *FakeClient) IncrCalls(stub func(string, map[string]string)) {
	fake.incrMutex.Lock()
	defer fake.incrMutex.Unlock()
	fake.IncrStub = stub
}

func (fake *FakeClient) IncrArgsForCall(i int) (string, map[string]string) {
	fake.incrMutex.RLock()
	defer fake.incrMutex.RUnlock()
	argsForCall := fake.incrArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeClient) Timing(arg1 string, arg2 time.Duration, arg3 map[string]string) {
	fake.timingMutex.Lock()
	fake.timingArgsForCall = append(fake.timingArgsForCall, struct {
		arg1 string
		arg2 time.Duration
		arg3 map[string]string
	}{arg1, arg2, arg3})
	stub := fake.TimingStub
	fake.recordInvocation("Timing", []interface{}{arg1, arg2, arg3})
	fake.timingMutex.Unlock()
	if stub != nil {
		fake.TimingStub(arg1, arg2, arg3)
	}
}

func (fake *FakeClient) TimingCallCount() int {
	fake.timingMutex.RLock()
	defer fake.timingMutex.RUnlock()
	return len(fake.timingArgsForCall)
}

func (fake *FakeClient) TimingCalls(stub func(string, time.Duration, map[string]string)) {
	fake.timingMutex.Lock()
	defer fake.timingMutex.Unlock()
	fake.TimingStub = stub
}

func (fake *FakeClient) TimingArgsForCall(i int) (string, time.Duration, map[string]string) {
	fake.timingMutex.RLock()
	defer fake.timingMutex.RUnlock()
	argsForCall := fake.timingArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.countMutex.RLock()
	defer fake.countMutex.RUnlock()
	fake.gaugeMutex.RLock()
	defer fake.gaugeMutex.RUnlock()
	fake.incrMutex.RLock()
	defer fake.incrMutex.RUnlock()
	fake.timingMutex.RLock()
	defer fake.timingMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ mtr.Client = new(FakeClient)
